1、	安装Docker
建议参考：
http://3ms.huawei.com/hi/group/ka/2030327/40659/77225/show.html
http://3ms.huawei.com/hi/group/2033815/wiki_4499375.html
2、	设置代理
 
http://www.cnblogs.com/edisonxiang/p/6911994.html
3、	Go安装
使用工具：https://github.com/moovweb/gvm
	遇见问题：curl: (60) SSL certificate problem: unable to get local issuer certificate
There are two way to by pass:
1.add -k option which allows curl to make insecure connections, which does not verify the certificate.
2.add root curl ca (download here) to /etc/ssl/certs/nodesource-ca.crt

 
gvm use go1.8.2

4、	K8S安装
可以参考
http://www.cnblogs.com/edisonxiang/p/6911994.html
PS:有时git clone 会遇见：GnuTLS recv error (-9): A TLS packet with unexpected length was received.可以采用如下方式解决：
1)	Remove current GIT from your system
	sudo apt-get purge git
2)	Download GIT deb git_1.9.1-1_amd64.deb link
3)	Execute the downloaded DEB.
5、启用和测试etcd
1）启用etcd：
 
查看端口：
 
2）读写Etcd Key和Value
 

6、启动和测试Etcd
etcd-initial-advertise-peer-urls http://100.106.227.225:2380,http://127.0.0.1:2380 \
-listen-peer-urls http://100.106.227.225:2380,http://127.0.0.1:2380 \
-listen-client-urls http://100.106.227.225:2379,http://127.0.0.1:2379 \
-advertise-client-urls http://100.106.227.225:2379,http://127.0.0.1:2379 \
--initial-cluster default=http://100.106.227.225:2380,default=http://127.0.0.1:2380 \
--initial-cluster-state new  > /myfile/etcd.log 2>&1 &

etcdctl set foo bar
etcdctl get foo


7 启动Flannel并关联Docker
1) 启动Flannel
flanneld
 
2) 设置Etcd配置Flannel
etcdctl set /coreos.com/network/config '{"Network":"172.17.0.0/16"}'
etcdctl set /coreos.com/network/subnets/172.17.10.0-24 '{"PublicIP":"100.106.227.225"}'
 
3) 设置Flannel关联Docker
mk-docker-opts.sh -i
source /run/flannel/subnet.env
rm /var/run/docker.pid
ifconfig docker0 ${FLANNEL_SUBNET}
service docker restart

8 启动K8S
1) 启动kube-apiserver
kube-apiserver --address=0.0.0.0  --insecure-port=8080 --service-cluster-ip-range='10.10.10.1/24' \
--log_dir=/usr/local/kubernete_test/logs/kube --kubelet_port=10250 --v=0 --logtostderr=false \
--etcd_servers=http://100.106.227.225:2379 --allow_privileged=false \
> /myfile/apiServer.log 2>&1 &
 
2) 启动kube-controller-manager
kube-controller-manager  --v=0 --logtostderr=false --log_dir=/usr/local/kubernete_test/logs/kube \
--master=100.106.227.225:8080 > /myfile/controllerMange.log 2>&1 &
 
3) 启动kube-scheduler 
kube-scheduler  --master='100.106.227.225:8080' --v=0  --log_dir=/usr/local/kubernete_test/logs/kube  \
> /myfile/scheduler.log 2>&1 &
 
4) 测试master节点是否正常启动
kubectl get componentstatuses
 
5) 启动kube-proxy 
kube-proxy  --logtostderr=false --v=0 --master=http://100.106.227.225:8080 \
> /myfile/kube-proxy.log 2>&1 &
 
6) 启动kubelet  
kubelet  --logtostderr=false --v=0 --allow-privileged=false  --log_dir=/usr/local/kubernete_test/logs/kube  \
--address=0.0.0.0  --port=10250  --hostname_override=100.106.227.225  --api_servers=http://100.106.227.225:8080 \
> /myfile/kubelet.log 2>&1 &
 
7) 在Node上设置集群Context
kubectl config set-cluster test-cluster --server=http://127.0.0.1:8080
kubectl config set-context test-cluster --cluster=test-cluster
kubectl config use-context test-cluster 
 
8) 准备kubernetes/pause镜像
由于K8S Pod需要Pause镜像来启动Pause容器，所以需要准备kubernetes/pause镜像
docker pull docker.io/kubernetes/pause
docker tag f9d5de079539 gcr.io/google_containers/pause:2.0
 
这里相当于是把docker.io重命名为gcr.io，f9d5de079539为拉下来的镜像ID（docker images）
 
9) 确认K8S是否启动成功
kubectl get nodes



9 部署Nginx集群
1) 创建Nginx Pods
kubectl run nginx --image=nginx --port=80  --replicas=5
kubectl get pods
 
2) 创建nginx-service.yaml
复制代码
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    targetPort: 9090
  selector:
    name: nginx 
复制代码
3) 根据Pods创建Service
kubectl create -f nginx-service.yaml
kubectl get services
